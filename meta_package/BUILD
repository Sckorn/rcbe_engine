load("//meta_package:rules.bzl", "r_cc_library")
load("@rules_pkg//:pkg.bzl", "pkg_deb", "pkg_tar")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("//meta_package:global_variables.bzl", "ENGINE_VERSION_MAJOR")
load("//meta_package:global_variables.bzl", "ENGINE_VERSION_MINOR")
load("//meta_package:global_variables.bzl", "ENGINE_VERSION_PATCH")
load("//meta_package:global_variables.bzl", "ENGINE_VERSION_FULL")
load("//meta_package:global_variables.bzl", "TARGET_ARCH")
load("//meta_package:global_variables.bzl", "PROJECT_URL")
load("//meta_package:global_variables.bzl", "PROJECT_MAINTAINER")
load("//meta_package:global_variables.bzl", "ENGINE_BUILD_TARGET_PREFIX")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@bazel_skylib//lib:selects.bzl", "selects")

_PACKAGE_NAME = "config"

_CONFIG_TARGET = "{}_{}".format(ENGINE_BUILD_TARGET_PREFIX, _PACKAGE_NAME)
_TEMPLATE_TARGET = "{}_template".format(_CONFIG_TARGET)

expand_template(
    name = _TEMPLATE_TARGET,
    out = "engine_config.hpp",
    substitutions = {
        "@RDMN_ENGINE_MAJOR_VERSION@": ENGINE_VERSION_MAJOR,
        "@RDMN_ENGINE_MINOR_VERSION@": ENGINE_VERSION_MINOR,
        "@RDMN_ENGINE_PATCH_VERSION@": ENGINE_VERSION_PATCH,
        "@RDMN_ENGINE_PROJECT_URL@": PROJECT_URL,
        "@RDMN_ENGINE_PROJECT_MAINTAINER@": PROJECT_MAINTAINER,
    },
    template = "engine_config_header/engine_config.hpp.in",
)

r_cc_library(
    name = _CONFIG_TARGET,
    hdrs = ["engine_config.hpp"],
    data = [_TEMPLATE_TARGET],
    include_prefix = "rcbe-engine",
    includes = ["."],
    visibility = ["//visibility:public"],
)

### packaging

## Header

pkg_tar(
    name = "engine-config-data",
    srcs = [
        _CONFIG_TARGET,
    ],
    mode = "0644",
    package_dir = "/usr/include/rcbe/rcbe-engine/",
)

pkg_tar(
    name = "engine-config-package-data",
    extension = "tar.gz",
    visibility = ["//visibility:public"],
    deps = [
        ":engine-config-data",
    ],
)

pkg_deb(
    name = "engine-config-deb",
    architecture = TARGET_ARCH,
    built_using = "unzip (6.0.1)",
    data = ":engine-config-package-data",
    description = "RDMN game engine autogenerated config header file.",
    homepage = PROJECT_URL,
    maintainer = PROJECT_MAINTAINER,
    package = _CONFIG_TARGET,
    version = ENGINE_VERSION_FULL,
)

# Configs Settings

string_flag(
    name = "rdmn_rasterizer_back",
    build_setting_default = "vulkan",
)

config_setting(
    name = "rdmn_gl_rasterizer_backend",
    flag_values = {
        ":rdmn_rasterizer_back": "opengl",
    },
)

config_setting(
    name = "rdmn_vk_rasterizer_backend",
    flag_values = {
        ":rdmn_rasterizer_back": "vulkan",
    },
)

config_setting(
    name = "rdmn_dx_rasterizer_backend",
    flag_values = {
        ":rdmn_rasterizer_back": "directx",
    },
)

bool_flag(
    name = "rdmn_build_shared_libs",
    build_setting_default = True,
)

config_setting(
    name = "rdmn_shared_libs_build",
    flag_values  = {
        ":rdmn_build_shared_libs": "True",
    },
)

config_setting(
    name = "rdmn_static_libs_build",
    flag_values  = {
        ":rdmn_build_shared_libs": "False",
    },
)

config_setting(
    name = "rdmn_debug",
    values = {
        "compilation_mode": "dbg",
    },
)

selects.config_setting_group(
    name = "rdmn_vulkan_windows",
    match_all = [":rdmn_vk_rasterizer_backend", "@bazel_tools//src/conditions:windows"],
)

selects.config_setting_group(
    name = "rdmn_vulkan_linux",
    match_all = [":rdmn_vk_rasterizer_backend", "@bazel_tools//src/conditions:linux"],
)

selects.config_setting_group(
    name = "rdmn_gl_linux",
    match_all = [":rdmn_gl_rasterizer_backend", "@bazel_tools//src/conditions:linux"],
)

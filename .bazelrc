########## general ###########

build --dynamic_mode=fully

# there are 3 possible compilation_modes in bazel: fast-build (default, optimized for build time), dbg (debug), opt (-O2, -DNDEBUG)
build -c opt
test -c opt

# we can not use sandbox for cc as we want to compile with ccache (ccache with sandbox is not supported in bazel)
# TODO: consider standalone mode only for cxx
build --spawn_strategy=standalone
build --genrule_strategy=standalone

test --spawn_strategy=standalone

# remove optional and experimental targets by default so that build //.. won't compile them
build --build_tag_filters=-optional,-experimental

# do not run integration tests by default
test --test_tag_filters=-integration_tests

########### caching ###########

# save bazel cache on host machine
#startup --output_user_root=/bazel/cache

# save repository_cache on host machine
#build --repository_cache=/bazel/repository_cache
#fetch --repository_cache=/bazel/repository_cache
#query --repository_cache=/bazel/repository_cache
#sync --repository_cache=/bazel/repository_cache

####### compiler and linker options ######

# enable c++23
build:linux --cxxopt=-std=c++23
build:linux --host_cxxopt=-std=c++23

build:linux --conlyopt=-std=c99
build:linux --host_conlyopt=-std=c99

build:linux --host_linkopt=-Wl,--no-undefined,--no-allow-shlib-undefined

build:windows --copt=/std:c++20
build:windows --host_copt=/std:c++20
build:windows --copt=/W0
build:windows --host_copt=/W0

# On Windows, `__cplusplus` is wrongly defined without this switch
# See https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
build:windows --copt=/Zc:__cplusplus
build:windows --host_copt=/Zc:__cplusplus

# For math constants that only get defined by MSVC headers if
# _USE_MATH_DEFINES is defined.
build:windows --copt=/D_USE_MATH_DEFINES
build:windows --host_copt=/D_USE_MATH_DEFINES

# Windows has a relatively short command line limit
# See https://docs.bazel.build/versions/main/windows.html
build:windows --features=compiler_param_file
build:windows --features=archive_param_file

# Speed Windows compile times. Available in VS 16.4 (we are on 17.0.1). See
# https://groups.google.com/a/tensorflow.org/d/topic/build/SsW98Eo7l3o/discussion
build:windows --copt=/d2ReducedOptimizeHugeFunctions
build:windows --host_copt=/d2ReducedOptimizeHugeFunctions

# Enable the runfiles symlink tree on Windows. 
startup --windows_enable_symlinks
build:windows --enable_runfiles

# Make sure to include as little of windows.h as possible
build:windows --copt=-DWIN32_LEAN_AND_MEAN
build:windows --host_copt=-DWIN32_LEAN_AND_MEAN

# Due to bazel needing bzip2 and us needing to build with clang 16
# we need this flags, since bzip build fails miserably
# thanks a lot bazel
build:linux --host_copt=-Wno-error=implicit-function-declaration
build:linux --copt=-Wno-error=implicit-function-declaration
build:linux --host_copt=-Wno-error=int-conversion
build:linux --copt=-Wno-error=int-conversion

# MSVC (Windows): Standards-conformant preprocessor mode
# See https://docs.microsoft.com/en-us/cpp/preprocessor/preprocessor-experimental-overview
build:windows --copt=/Zc:preprocessor
build:windows --host_copt=/Zc:preprocessor

# Misc build options we need for windows.
build:windows --linkopt=/DEBUG
build:windows --host_linkopt=/DEBUG
build:windows --linkopt=/OPT:REF
build:windows --host_linkopt=/OPT:REF
build:windows --linkopt=/OPT:ICF
build:windows --host_linkopt=/OPT:ICF

# Verbose failure logs when something goes wrong
build:windows --verbose_failures

# Work around potential issues with large command lines on windows.
# See: https://github.com/bazelbuild/bazel/issues/5163
build:windows --features=compiler_param_file

# TODO: enable hardball compiler flags
build:hardball --host_copt=-Werror
build:hardball --host_copt=-Wall
build:hardball --host_copt=-Wextra
build:hardball --host_copt=-Wpedantic
build:hardball --host_copt=-Wcast-align
build:hardball --host_copt=-Wcast-qual
build:hardball --host_copt=-Wconversion
build:hardball --host_copt=-Wctor-dtor-privacy
build:hardball --host_copt=-Wenum-compare
build:hardball --host_copt=-Wfloat-equal
build:hardball --host_copt=-Wnon-virtual-dtor
build:hardball --host_copt=-Wold-style-cast
build:hardball --host_copt=-Woverloaded-virtual
build:hardball --host_copt=-Wredundant-decls
build:hardball --host_copt=-Wsign-conversion
build:hardball --host_copt=-Wsign-promo
build:hardball --host_copt=-Wno-unused-function
build:hardball --host_copt=-Wchkp
build:hardball --host_copt=-Wimplicit-fallthrough
build:hardball --host_copt=-Wparentheses
build:hardball --host_copt=-Wunused-parameter
build:hardball --host_copt=-Wuninitialized
build:hardball --host_copt=-Wduplicated-branches
build:hardball --host_copt=-Wshadow
build:hardball --host_copt=-Wlogical-op
build:hardball --host_copt=-Wmissing-declarations

build:thread_sanitizer --copt=-fsanitize=thread

build:thread_sanitizer --linkopt=-fsanitize=thread